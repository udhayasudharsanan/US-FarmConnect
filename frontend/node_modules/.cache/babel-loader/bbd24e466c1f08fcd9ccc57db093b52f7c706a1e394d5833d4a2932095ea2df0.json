{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Udhaya\\\\Desktop\\\\mern-farm-connect\\\\frontend\\\\src\\\\components\\\\CustomerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getProducts } from '../api';\nimport Chat from './Chat';\nimport Cart from './Cart'; // Assuming Cart is a component\nimport axios from 'axios';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerDashboard = () => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [cart, setCart] = useState([]); // State to manage cart items\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const productId = \"yourProductIdHere\"; // Replace this with the actual product ID based on the context\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await getProducts(); // Fetch products from API\n        setProducts(response.data.products); // Assuming your API returns the correct products array\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n      }\n    };\n    fetchProducts();\n  }, []);\n\n  // Function to add product to the cart\n  const addToCart = product => {\n    setCart(prevCart => [...prevCart, product]); // Add the selected product to the cart\n    alert(`${product.name} added to cart!`); // Notify user\n  };\n  useEffect(() => {\n    // Fetch previous messages when the component mounts\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/messages/${productId}`);\n        setMessages(response.data.messages);\n      } catch (error) {\n        console.error(\"Error fetching messages:\", error);\n      }\n    };\n    fetchMessages();\n\n    // Listen for incoming messages\n    socket.on('receiveMessage', messageData => {\n      if (messageData.productId === productId) {\n        // Check if the message is for this product\n        setMessages(prevMessages => [...prevMessages, messageData]);\n      }\n    });\n    return () => {\n      socket.off('receiveMessage'); // Clean up the listener on unmount\n    };\n  }, [productId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Customer Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Available Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Array.isArray(products) && products.length > 0 ? products.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: $\", product.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Quantity: \", product.quantity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:5000/${product.image}`,\n          alt: product.name,\n          style: {\n            width: '100px',\n            height: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chat, {\n          productId: product._id,\n          farmerId: product.farmer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), \" \"]\n      }, product._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No products available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerDashboard, \"AG+rD+fgDTrkPGFP4TBV8vCUsCY=\");\n_c = CustomerDashboard;\nexport default CustomerDashboard;\nvar _c;\n$RefreshReg$(_c, \"CustomerDashboard\");","map":{"version":3,"names":["React","useState","useEffect","getProducts","Chat","Cart","axios","socket","jsxDEV","_jsxDEV","CustomerDashboard","_s","products","setProducts","cart","setCart","messages","setMessages","message","setMessage","productId","fetchProducts","response","data","error","console","addToCart","product","prevCart","alert","name","fetchMessages","get","on","messageData","prevMessages","off","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","length","map","price","quantity","src","image","alt","style","width","height","_id","farmerId","farmer","_c","$RefreshReg$"],"sources":["C:/Users/Udhaya/Desktop/mern-farm-connect/frontend/src/components/CustomerDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getProducts } from '../api';\r\nimport Chat from './Chat';\r\nimport Cart from './Cart'; // Assuming Cart is a component\r\nimport axios from 'axios';\r\nimport socket from '../socket';\r\n\r\n\r\nconst CustomerDashboard = () => {\r\n  const [products, setProducts] = useState([]);\r\n  const [cart, setCart] = useState([]); // State to manage cart items\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const productId = \"yourProductIdHere\"; // Replace this with the actual product ID based on the context\r\n  \r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await getProducts(); // Fetch products from API\r\n        setProducts(response.data.products);  // Assuming your API returns the correct products array\r\n      } catch (error) {\r\n        console.error(\"Error fetching products:\", error);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  // Function to add product to the cart\r\n  const addToCart = (product) => {\r\n    setCart((prevCart) => [...prevCart, product]); // Add the selected product to the cart\r\n    alert(`${product.name} added to cart!`); // Notify user\r\n  };\r\n  useEffect(() => {\r\n    // Fetch previous messages when the component mounts\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/messages/${productId}`);\r\n        setMessages(response.data.messages);\r\n      } catch (error) {\r\n        console.error(\"Error fetching messages:\", error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n\r\n    // Listen for incoming messages\r\n    socket.on('receiveMessage', (messageData) => {\r\n      if (messageData.productId === productId) { // Check if the message is for this product\r\n        setMessages((prevMessages) => [...prevMessages, messageData]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off('receiveMessage'); // Clean up the listener on unmount\r\n    };\r\n  }, [productId]);\r\n\r\n  return (\r\n    <div>\r\n    <h2>Customer Dashboard</h2>\r\n    <Cart /> {/* Include the cart component */}\r\n    <h3>Available Products</h3>\r\n    <ul>\r\n      {Array.isArray(products) && products.length > 0 ? (\r\n        products.map(product => (\r\n          <li key={product._id}>\r\n            <h4>{product.name}</h4>\r\n            <p>Price: ${product.price}</p>\r\n            <p>Quantity: {product.quantity}</p>\r\n            <img src={`http://localhost:5000/${product.image}`} alt={product.name} style={{ width: '100px', height: 'auto' }} />\r\n            <Chat productId={product._id} farmerId={product.farmer} /> {/* Pass the actual product ID here */}\r\n          </li>\r\n        ))\r\n      ) : (\r\n        <p>No products available</p>\r\n      )}\r\n    </ul>\r\n  </div>\r\n);\r\n};\r\n\r\nexport default CustomerDashboard;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}