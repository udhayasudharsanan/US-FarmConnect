{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Udhaya\\\\Desktop\\\\mern-farm-connect\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  productId\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const sendMessage = e => {\n    e.preventDefault();\n    if (message.trim()) {\n      const newMessage = {\n        text: message,\n        sender: 'customer'\n      };\n      setMessages([...messages, newMessage]);\n      setMessage(''); // Clear the message input\n\n      // Here, you can implement a function to send this message to the server\n      // For now, we just log it to the console\n      console.log(`Message sent for product ${productId}: ${message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Chat for Product \", productId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        height: '150px',\n        overflowY: 'scroll'\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: msg.sender === 'customer' ? 'right' : 'left'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender === 'customer' ? 'You' : 'Farmer', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"R9cL6wTFJ4Cm4nINx8rfDHzMChE=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","productId","_s","message","setMessage","messages","setMessages","sendMessage","e","preventDefault","trim","newMessage","text","sender","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","style","border","padding","height","overflowY","map","msg","index","textAlign","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Udhaya/Desktop/mern-farm-connect/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Chat = ({ productId }) => {\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (message.trim()) {\r\n      const newMessage = { text: message, sender: 'customer' };\r\n      setMessages([...messages, newMessage]);\r\n      setMessage(''); // Clear the message input\r\n\r\n      // Here, you can implement a function to send this message to the server\r\n      // For now, we just log it to the console\r\n      console.log(`Message sent for product ${productId}: ${message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Chat for Product {productId}</h3>\r\n      <div style={{ border: '1px solid #ccc', padding: '10px', height: '150px', overflowY: 'scroll' }}>\r\n        {messages.map((msg, index) => (\r\n          <div key={index} style={{ textAlign: msg.sender === 'customer' ? 'right' : 'left' }}>\r\n            <strong>{msg.sender === 'customer' ? 'You' : 'Farmer'}:</strong> {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={sendMessage}>\r\n        <input \r\n          type=\"text\" \r\n          value={message} \r\n          onChange={(e) => setMessage(e.target.value)} \r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,WAAW,GAAIC,CAAC,IAAK;IACzBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIN,OAAO,CAACO,IAAI,CAAC,CAAC,EAAE;MAClB,MAAMC,UAAU,GAAG;QAAEC,IAAI,EAAET,OAAO;QAAEU,MAAM,EAAE;MAAW,CAAC;MACxDP,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEM,UAAU,CAAC,CAAC;MACtCP,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEhB;MACA;MACAU,OAAO,CAACC,GAAG,CAAC,4BAA4Bd,SAAS,KAAKE,OAAO,EAAE,CAAC;IAClE;EACF,CAAC;EAED,oBACEJ,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,GAAI,mBAAiB,EAACf,SAAS;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrCrB,OAAA;MAAKsB,KAAK,EAAE;QAAEC,MAAM,EAAE,gBAAgB;QAAEC,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAT,QAAA,EAC7FX,QAAQ,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvB7B,OAAA;QAAiBsB,KAAK,EAAE;UAAEQ,SAAS,EAAEF,GAAG,CAACd,MAAM,KAAK,UAAU,GAAG,OAAO,GAAG;QAAO,CAAE;QAAAG,QAAA,gBAClFjB,OAAA;UAAAiB,QAAA,GAASW,GAAG,CAACd,MAAM,KAAK,UAAU,GAAG,KAAK,GAAG,QAAQ,EAAC,GAAC;QAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACO,GAAG,CAACf,IAAI;MAAA,GADlEgB,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNrB,OAAA;MAAM+B,QAAQ,EAAEvB,WAAY;MAAAS,QAAA,gBAC1BjB,OAAA;QACEgC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE7B,OAAQ;QACf8B,QAAQ,EAAGzB,CAAC,IAAKJ,UAAU,CAACI,CAAC,CAAC0B,MAAM,CAACF,KAAK,CAAE;QAC5CG,WAAW,EAAC;MAAsB;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFrB,OAAA;QAAQgC,IAAI,EAAC,QAAQ;QAAAf,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAClB,EAAA,CAtCIF,IAAI;AAAAoC,EAAA,GAAJpC,IAAI;AAwCV,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}