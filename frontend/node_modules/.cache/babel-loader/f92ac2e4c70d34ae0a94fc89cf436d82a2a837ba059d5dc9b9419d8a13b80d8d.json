{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Udhaya\\\\Desktop\\\\mern-farm-connect\\\\frontend\\\\src\\\\components\\\\CustomerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getProducts } from '../api';\nimport Chat from './Chat';\nimport Cart from './Cart'; // Assuming Cart is a component\nimport axios from 'axios';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerDashboard = () => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [cart, setCart] = useState([]); // State to manage cart items\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const productId = \"yourProductIdHere\"; // Replace this with the actual product ID based on the context\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await getProducts(); // Fetch products from API\n        setProducts(response.data.products); // Assuming your API returns the correct products array\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n      }\n    };\n    fetchProducts();\n  }, []);\n\n  // Function to add product to the cart\n  const addToCart = product => {\n    setCart(prevCart => [...prevCart, product]); // Add the selected product to the cart\n    alert(`${product.name} added to cart!`); // Notify user\n  };\n  useEffect(() => {\n    // Fetch previous messages when the component mounts\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/messages/${productId}`);\n        setMessages(response.data.messages); // Assuming the API response structure is correct\n      } catch (error) {\n        console.error(\"Error fetching messages:\", error);\n      }\n    };\n    fetchMessages();\n\n    // Listen for incoming messages\n    socket.on('receiveMessage', messageData => {\n      if (messageData.productId === productId) {\n        // Check if the message is for this product\n        setMessages(prevMessages => [...prevMessages, messageData]);\n      }\n    });\n    return () => {\n      socket.off('receiveMessage'); // Clean up the listener on unmount\n    };\n  }, [productId]); // Adding productId as a dependency\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (message.trim()) {\n      const messageData = {\n        productId,\n        text: message,\n        sender: 'customer' // Identify the sender as a customer\n      };\n\n      // Emit the message to the server\n      socket.emit('sendMessage', messageData);\n\n      // Save the message to the database\n      try {\n        await axios.post('http://localhost:5000/api/messages', messageData); // Make sure this endpoint is correct\n        setMessages(prevMessages => [...prevMessages, messageData]); // Update local messages\n        setMessage(''); // Clear the input field\n      } catch (error) {\n        console.error('Error saving message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Customer Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Chat Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender === 'farmer' ? 'Farmer' : 'Customer', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message...\",\n        required: true // Require a message before sending\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerDashboard, \"AG+rD+fgDTrkPGFP4TBV8vCUsCY=\");\n_c = CustomerDashboard;\nexport default CustomerDashboard;\nvar _c;\n$RefreshReg$(_c, \"CustomerDashboard\");","map":{"version":3,"names":["React","useState","useEffect","getProducts","Chat","Cart","axios","socket","jsxDEV","_jsxDEV","CustomerDashboard","_s","products","setProducts","cart","setCart","messages","setMessages","message","setMessage","productId","fetchProducts","response","data","error","console","addToCart","product","prevCart","alert","name","fetchMessages","get","on","messageData","prevMessages","off","sendMessage","e","preventDefault","trim","text","sender","emit","post","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/Udhaya/Desktop/mern-farm-connect/frontend/src/components/CustomerDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getProducts } from '../api';\r\nimport Chat from './Chat';\r\nimport Cart from './Cart'; // Assuming Cart is a component\r\nimport axios from 'axios';\r\nimport socket from '../socket';\r\n\r\n\r\nconst CustomerDashboard = () => {\r\n  const [products, setProducts] = useState([]);\r\n  const [cart, setCart] = useState([]); // State to manage cart items\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const productId = \"yourProductIdHere\"; // Replace this with the actual product ID based on the context\r\n  \r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await getProducts(); // Fetch products from API\r\n        setProducts(response.data.products);  // Assuming your API returns the correct products array\r\n      } catch (error) {\r\n        console.error(\"Error fetching products:\", error);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  // Function to add product to the cart\r\n  const addToCart = (product) => {\r\n    setCart((prevCart) => [...prevCart, product]); // Add the selected product to the cart\r\n    alert(`${product.name} added to cart!`); // Notify user\r\n  };\r\n  useEffect(() => {\r\n    // Fetch previous messages when the component mounts\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/messages/${productId}`);\r\n        setMessages(response.data.messages); // Assuming the API response structure is correct\r\n      } catch (error) {\r\n        console.error(\"Error fetching messages:\", error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n\r\n    // Listen for incoming messages\r\n    socket.on('receiveMessage', (messageData) => {\r\n      if (messageData.productId === productId) { // Check if the message is for this product\r\n        setMessages((prevMessages) => [...prevMessages, messageData]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off('receiveMessage'); // Clean up the listener on unmount\r\n    };\r\n  }, [productId]); // Adding productId as a dependency\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (message.trim()) {\r\n      const messageData = {\r\n        productId,\r\n        text: message,\r\n        sender: 'customer', // Identify the sender as a customer\r\n      };\r\n\r\n      // Emit the message to the server\r\n      socket.emit('sendMessage', messageData);\r\n\r\n      // Save the message to the database\r\n      try {\r\n        await axios.post('http://localhost:5000/api/messages', messageData); // Make sure this endpoint is correct\r\n        setMessages((prevMessages) => [...prevMessages, messageData]); // Update local messages\r\n        setMessage(''); // Clear the input field\r\n      } catch (error) {\r\n        console.error('Error saving message:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Customer Dashboard</h2>\r\n      <div>\r\n        <h3>Chat Messages</h3>\r\n        {messages.map((msg, index) => (\r\n          <div key={index}>\r\n            <strong>{msg.sender === 'farmer' ? 'Farmer' : 'Customer'}:</strong> {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={sendMessage}>\r\n        <input \r\n          type=\"text\" \r\n          value={message} \r\n          onChange={(e) => setMessage(e.target.value)} \r\n          placeholder=\"Type your message...\"\r\n          required // Require a message before sending\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerDashboard;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}