{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Udhaya\\\\Desktop\\\\mern-farm-connect\\\\frontend\\\\src\\\\components\\\\MessagesPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessagePage = ({\n  productId\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n\n  // Fetch messages when the component mounts\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/messages/${productId}`);\n        setMessages(response.data.messages); // Assuming your API returns a messages array\n      } catch (error) {\n        console.error(\"Error fetching messages:\", error);\n      }\n    };\n    fetchMessages();\n\n    // Listen for incoming messages\n    socket.on('receiveMessage', messageData => {\n      if (messageData.productId === productId) {\n        setMessages(prevMessages => [...prevMessages, messageData]); // Update state with new message\n      }\n    });\n    return () => {\n      socket.off('receiveMessage'); // Clean up the listener on unmount\n    };\n  }, [productId]);\n\n  // Function to send messages\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (message.trim()) {\n      const messageData = {\n        productId,\n        text: message,\n        sender: 'customer' // Adjust this based on the user role\n      };\n\n      // Emit the message to the server\n      socket.emit('sendMessage', messageData);\n\n      // Save the message to the database\n      try {\n        await axios.post('http://localhost:5000/api/messages', messageData);\n        setMessages(prevMessages => [...prevMessages, messageData]); // Update local messages\n        setMessage(''); // Clear input field\n      } catch (error) {\n        console.error('Error saving message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list\",\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        height: '400px',\n        overflowY: 'scroll'\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: msg.sender === 'customer' ? 'right' : 'left'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message...\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(MessagePage, \"9iyGj6dRHK6V1mxAAjlNUec9m4A=\");\n_c = MessagePage;\nexport default MessagePage;\nvar _c;\n$RefreshReg$(_c, \"MessagePage\");","map":{"version":3,"names":["React","useEffect","useState","axios","socket","jsxDEV","_jsxDEV","MessagePage","productId","_s","messages","setMessages","message","setMessage","fetchMessages","response","get","data","error","console","on","messageData","prevMessages","off","sendMessage","e","preventDefault","trim","text","sender","emit","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","border","padding","height","overflowY","map","msg","index","textAlign","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/Udhaya/Desktop/mern-farm-connect/frontend/src/components/MessagesPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport socket from '../socket';\r\n\r\nconst MessagePage = ({ productId }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  \r\n  // Fetch messages when the component mounts\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/messages/${productId}`);\r\n        setMessages(response.data.messages); // Assuming your API returns a messages array\r\n      } catch (error) {\r\n        console.error(\"Error fetching messages:\", error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n\r\n    // Listen for incoming messages\r\n    socket.on('receiveMessage', (messageData) => {\r\n      if (messageData.productId === productId) {\r\n        setMessages((prevMessages) => [...prevMessages, messageData]); // Update state with new message\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off('receiveMessage'); // Clean up the listener on unmount\r\n    };\r\n  }, [productId]);\r\n\r\n  // Function to send messages\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (message.trim()) {\r\n      const messageData = {\r\n        productId,\r\n        text: message,\r\n        sender: 'customer', // Adjust this based on the user role\r\n      };\r\n\r\n      // Emit the message to the server\r\n      socket.emit('sendMessage', messageData);\r\n\r\n      // Save the message to the database\r\n      try {\r\n        await axios.post('http://localhost:5000/api/messages', messageData);\r\n        setMessages((prevMessages) => [...prevMessages, messageData]); // Update local messages\r\n        setMessage(''); // Clear input field\r\n      } catch (error) {\r\n        console.error('Error saving message:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"message-page\">\r\n      <h2>Messages</h2>\r\n      <div className=\"message-list\" style={{ border: '1px solid #ccc', padding: '10px', height: '400px', overflowY: 'scroll' }}>\r\n        {messages.map((msg, index) => (\r\n          <div key={index} style={{ textAlign: msg.sender === 'customer' ? 'right' : 'left' }}>\r\n            <strong>{msg.sender}:</strong> {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={sendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessagePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}