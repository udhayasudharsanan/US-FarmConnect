{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Udhaya\\\\Desktop\\\\mern-farm-connect\\\\frontend\\\\src\\\\components\\\\Cart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useCart } from '../context/CartContext';\nimport axios from 'axios';\nimport socket from '../socket'; // Assuming socket setup\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cart() {\n  _s();\n  const {\n    cart,\n    setCart\n  } = useCart(); // Add setCart to update the cart state\n  const [negotiationMessages, setNegotiationMessages] = useState({});\n  const [requestedPrices, setRequestedPrices] = useState({});\n  const token = localStorage.getItem('token'); // Retrieve the token from localStorage\n\n  // Fetch updated cart data after login or negotiation (if needed)\n  const fetchUpdatedCart = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/cart', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setCart(response.data.cart); // Update cart with fetched data\n    } catch (error) {\n      console.error('Error fetching updated cart:', error);\n    }\n  };\n\n  // Listen for negotiation updates from the farmer\n  useEffect(() => {\n    socket.on('negotiationUpdated', data => {\n      const {\n        productId,\n        newPrice\n      } = data;\n      setCart(prevCart => prevCart.map(item => item._id === productId ? {\n        ...item,\n        price: newPrice\n      } : item));\n    });\n    return () => socket.off('negotiationUpdated');\n  }, [setCart]);\n  // Handle changes in negotiation message input\n  const handleNegotiationChange = (e, productId) => {\n    setNegotiationMessages({\n      ...negotiationMessages,\n      [productId]: e.target.value\n    });\n  };\n\n  // Handle changes in requested price input\n  const handlePriceChange = (e, productId) => {\n    setRequestedPrices({\n      ...requestedPrices,\n      [productId]: e.target.value\n    });\n  };\n\n  // Function to send negotiation request to the farmer\n  const sendNegotiation = async (productId, farmerId) => {\n    const message = negotiationMessages[productId];\n    const requestedPrice = requestedPrices[productId];\n    if (!message || !requestedPrice) {\n      alert('Please provide both a message and a requested price.');\n      return;\n    }\n    try {\n      // Ensure the token is available\n      if (!token) {\n        alert('Authorization token is missing. Please log in again.');\n        return;\n      }\n      const response = await axios.post('http://localhost:5000/api/negotiate', {\n        productId,\n        farmerId,\n        message,\n        requestedPrice\n      },\n      // Send farmerId along with the request\n      {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // Ensure the token is passed in the headers\n      });\n      if (response.data.success) {\n        alert('Negotiation request sent to the farmer.');\n        // Clear the message and requested price after sending\n        setNegotiationMessages(prev => ({\n          ...prev,\n          [productId]: ''\n        }));\n        setRequestedPrices(prev => ({\n          ...prev,\n          [productId]: ''\n        }));\n        fetchUpdatedCart(); // Fetch the updated cart after negotiation\n      } else {\n        alert('Failed to send negotiation request. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error sending negotiation message:', error);\n      alert('Error sending negotiation request. Please check your network and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), cart.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your cart is empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: cart.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: $\", item.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Quantity: \", item.quantity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), item.quantity >= item.minQuantityForNegotiation ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Enter your negotiation message\",\n            value: negotiationMessages[item._id] || '',\n            onChange: e => handleNegotiationChange(e, item._id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Enter your requested price\",\n            value: requestedPrices[item._id] || '',\n            onChange: e => handlePriceChange(e, item._id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => sendNegotiation(item._id, item.farmer),\n            children: [\" \", \"Send Negotiation\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Negotiation not available (min quantity for negotiation: \", item.minQuantityForNegotiation, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this)]\n      }, item._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      children: \"Proceed to Checkout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(Cart, \"Cbj1umDKBmIxaVwe7I9PVin3Yks=\", false, function () {\n  return [useCart];\n});\n_c = Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","useCart","axios","socket","jsxDEV","_jsxDEV","Cart","_s","cart","setCart","negotiationMessages","setNegotiationMessages","requestedPrices","setRequestedPrices","token","localStorage","getItem","fetchUpdatedCart","response","get","headers","Authorization","data","error","console","on","productId","newPrice","prevCart","map","item","_id","price","off","handleNegotiationChange","e","target","value","handlePriceChange","sendNegotiation","farmerId","message","requestedPrice","alert","post","success","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","length","name","quantity","minQuantityForNegotiation","placeholder","onChange","type","onClick","farmer","className","_c","$RefreshReg$"],"sources":["C:/Users/Udhaya/Desktop/mern-farm-connect/frontend/src/components/Cart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useCart } from '../context/CartContext';\r\nimport axios from 'axios';\r\nimport socket from '../socket'; // Assuming socket setup\r\n\r\nexport default function Cart() {\r\n  const { cart, setCart } = useCart(); // Add setCart to update the cart state\r\n  const [negotiationMessages, setNegotiationMessages] = useState({});\r\n  const [requestedPrices, setRequestedPrices] = useState({});\r\n  const token = localStorage.getItem('token'); // Retrieve the token from localStorage\r\n\r\n  // Fetch updated cart data after login or negotiation (if needed)\r\n  const fetchUpdatedCart = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/cart', {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setCart(response.data.cart); // Update cart with fetched data\r\n    } catch (error) {\r\n      console.error('Error fetching updated cart:', error);\r\n    }\r\n  };\r\n\r\n  // Listen for negotiation updates from the farmer\r\n  useEffect(() => {\r\n    socket.on('negotiationUpdated', (data) => {\r\n      const { productId, newPrice } = data;\r\n      setCart((prevCart) =>\r\n        prevCart.map(item => item._id === productId ? { ...item, price: newPrice } : item)\r\n      );\r\n    });\r\n  \r\n    return () => socket.off('negotiationUpdated');\r\n  }, [setCart]);\r\n  // Handle changes in negotiation message input\r\n  const handleNegotiationChange = (e, productId) => {\r\n    setNegotiationMessages({\r\n      ...negotiationMessages,\r\n      [productId]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Handle changes in requested price input\r\n  const handlePriceChange = (e, productId) => {\r\n    setRequestedPrices({\r\n      ...requestedPrices,\r\n      [productId]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Function to send negotiation request to the farmer\r\n  const sendNegotiation = async (productId, farmerId) => {\r\n    const message = negotiationMessages[productId];\r\n    const requestedPrice = requestedPrices[productId];\r\n    \r\n    if (!message || !requestedPrice) {\r\n      alert('Please provide both a message and a requested price.');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      // Ensure the token is available\r\n      if (!token) {\r\n        alert('Authorization token is missing. Please log in again.');\r\n        return;\r\n      }\r\n      \r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/negotiate',\r\n        { productId, farmerId, message, requestedPrice },  // Send farmerId along with the request\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },  // Ensure the token is passed in the headers\r\n        }\r\n      );\r\n  \r\n      if (response.data.success) {\r\n        alert('Negotiation request sent to the farmer.');\r\n        // Clear the message and requested price after sending\r\n        setNegotiationMessages((prev) => ({ ...prev, [productId]: '' }));\r\n        setRequestedPrices((prev) => ({ ...prev, [productId]: '' }));\r\n        fetchUpdatedCart(); // Fetch the updated cart after negotiation\r\n      } else {\r\n        alert('Failed to send negotiation request. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending negotiation message:', error);\r\n      alert('Error sending negotiation request. Please check your network and try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Cart</h2>\r\n      {cart.length === 0 ? (\r\n        <p>Your cart is empty</p>\r\n      ) : (\r\n        <ul>\r\n          {cart.map((item) => (\r\n            <li key={item._id}>\r\n              <h4>{item.name}</h4>\r\n              <p>Price: ${item.price}</p>\r\n              <p>Quantity: {item.quantity}</p>\r\n              {item.quantity >= item.minQuantityForNegotiation ? (\r\n                <div>\r\n                  <textarea\r\n                    placeholder=\"Enter your negotiation message\"\r\n                    value={negotiationMessages[item._id] || ''}\r\n                    onChange={(e) => handleNegotiationChange(e, item._id)}\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    placeholder=\"Enter your requested price\"\r\n                    value={requestedPrices[item._id] || ''}\r\n                    onChange={(e) => handlePriceChange(e, item._id)}\r\n                  />\r\n                  <button onClick={() => sendNegotiation(item._id, item.farmer)}> {/* Pass farmerId */}\r\n                    Send Negotiation\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <p>Negotiation not available (min quantity for negotiation: {item.minQuantityForNegotiation})</p>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <button className=\"btn btn-primary\">Proceed to Checkout</button>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}